{"version":3,"sources":["initials/initials.tsx","reducers/reducers.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["today","Date","toISOString","substring","initialTodoForm","id","discription","deadline","important","done","doneDate","initialState","todoForm","todoList","reducer","state","action","type","payload","filter","x","map","App","useReducer","AppState","dispatch","didRun","useRef","useEffect","current","raw","localStorage","getItem","JSON","parse","setItem","stringify","deleteTodo","item","className","onSubmit","e","preventDefault","placeholder","value","required","onChange","currentTarget","checked","key","onClick","makeDoneTodo","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.144a57fd.chunk.js","sourcesContent":["export const today = new Date().toISOString().substring(0, 10);\r\n\r\nexport const initialTodoForm = {\r\n    id: 0,\r\n    discription: \"\",\r\n    deadline: today,\r\n    important: false,\r\n    done: false,\r\n    doneDate: \"\"\r\n};\r\n\r\nexport const initialState = {\r\n    todoForm: initialTodoForm,\r\n    todoList: []\r\n};","import { AppState, Action } from \"../types/types\";\r\nimport { today, initialTodoForm } from \"../initials/initials\";\r\n\r\nexport function reducer(state: AppState, action: Action): AppState {\r\n  switch (action.type) {\r\n    case \"RESET\":\r\n      return action.payload\r\n    case \"ADD_DISCRIPTION\":\r\n      return {\r\n        ...state,\r\n        todoForm: { ...state.todoForm, discription: action.payload }\r\n      };\r\n    case \"ADD_DEADLINE\":\r\n      if (action.payload >= today) {\r\n        return {\r\n          ...state,\r\n          todoForm: { ...state.todoForm, deadline: action.payload }\r\n        };\r\n      } else {\r\n        return state;\r\n      }\r\n    case \"ADD_IMPORTANT\":\r\n      return {\r\n        ...state,\r\n        todoForm: { ...state.todoForm, important: action.payload }\r\n      };\r\n    case \"ADD_TODO\":\r\n      return {\r\n        ...state,\r\n        todoForm: { ...initialTodoForm, id: state.todoForm.id + 1 },\r\n        todoList: [...state.todoList, action.payload]\r\n      };\r\n    case \"DELETE_TODO\":\r\n      return {\r\n        ...state,\r\n        todoList: state.todoList.filter(x => x.id !== action.payload.id)\r\n      };\r\n    case \"MAKEDONE_TODO\":\r\n      return {\r\n        ...state,\r\n        todoList: state.todoList.map(x =>\r\n          x.id === action.payload.id\r\n            ? {\r\n                ...x,\r\n                done: true,\r\n                doneDate: today\r\n              }\r\n            : {\r\n                ...x\r\n              }\r\n        )\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import React, { useReducer, useEffect, useRef } from \"react\";\nimport { initialState } from \"./initials/initials\";\nimport { reducer } from \"./reducers/reducers\";\nimport { Todo } from \"./types/types\";\nimport \"./App.css\";\n\nconst App: React.FC = () => {\n  const [AppState, dispatch] = useReducer(reducer, initialState);\n\n\n  const didRun = useRef(false);\n\n  useEffect(() => {\n    if (!didRun.current) {\n      const raw = localStorage.getItem(\"data\");\n      if (raw) {\n        dispatch({ type: \"RESET\", payload: JSON.parse(raw) });\n        didRun.current = true;\n      }\n    }\n  });\n\n  useEffect(() => {\n    localStorage.setItem(\"data\", JSON.stringify(AppState));\n  }, [AppState]);\n\n  const makeDoneTodo = (item: Todo) => {\n    dispatch({ type: \"MAKEDONE_TODO\", payload: item });\n  };\n\n  const deleteTodo = (item: Todo) => {\n    dispatch({ type: \"DELETE_TODO\", payload: item });\n  };\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    dispatch({\n      type: \"ADD_TODO\",\n      payload: AppState.todoForm\n    });\n  };\n\n  return (\n    <div className=\"App\">\n      <form onSubmit={handleSubmit}>\n        <h1>Todo-Lista</h1>\n        <div>\n          <span>Dodaj zadanie</span>\n          <br />\n          <span>Podaj opis zadania: </span>\n          <input\n            type=\"text\"\n            placeholder=\"Discription...\"\n            value={AppState.todoForm.discription}\n            required\n            onChange={e =>\n              dispatch({\n                type: \"ADD_DISCRIPTION\",\n                payload: e.currentTarget.value\n              })\n            }\n          />\n        </div>\n        <div>\n          <span>Podaj deadline: </span>\n          <input\n            type=\"date\"\n            value={AppState.todoForm.deadline}\n            onChange={e =>\n              dispatch({\n                type: \"ADD_DEADLINE\",\n                payload: e.currentTarget.value\n              })\n            }\n          />\n        </div>\n        <div>\n          <span>Priorytet: </span>\n          <input\n            type=\"checkbox\"\n            checked={AppState.todoForm.important}\n            onChange={e =>\n              dispatch({\n                type: \"ADD_IMPORTANT\",\n                payload: e.currentTarget.checked\n              })\n            }\n          />\n        </div>\n        <button type=\"submit\">Dodaj</button>\n      </form>{\" \"}\n      <br />\n      <p>Lista zadań do zrobienia:</p>\n      <ul>\n        {AppState.todoList\n          .filter((x: Todo) => !x.done)\n          .map((item: Todo) => (\n            <li key={item.id}>\n              <span>{item.discription}</span>\n              <button onClick={() => makeDoneTodo(item)}>Zrobione!</button>\n              <button onClick={() => deleteTodo(item)}>Usuń</button>\n            </li>\n          ))}\n      </ul>\n      <p>\n        <span>Zadania zrobione:</span>\n        <ul>\n          {AppState.todoList\n            .filter((x: Todo) => x.done)\n            .map((item: Todo) => (\n              <li key={item.id}>\n                <span>\n                  {item.discription}, wykonano: {item.doneDate}\n                </span>\n                <button onClick={() => deleteTodo(item)}>Usuń</button>\n              </li>\n            ))}\n        </ul>\n      </p>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}