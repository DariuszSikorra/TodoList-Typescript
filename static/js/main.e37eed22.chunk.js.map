{"version":3,"sources":["initials/initials.tsx","reducers/reducers.tsx","context/context.tsx","components/Form.tsx","components/TodoList.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["today","Date","toISOString","substring","initialTodoForm","id","discription","deadline","important","done","doneDate","initialState","todoForm","todoList","reducer","state","action","type","payload","filter","x","map","AppStateContext","React","undefined","AppDispatchContext","useAppState","context","Error","useAppDispatch","Form","AppState","dispatch","onSubmit","e","preventDefault","placeholder","value","required","onChange","currentTarget","checked","TodoList","deleteTodo","item","key","style","color","onClick","makeDoneTodo","App","didRun","useRef","useEffect","current","raw","localStorage","getItem","JSON","parse","setItem","stringify","className","Boolean","window","location","hostname","match","ReactDOM","render","children","Provider","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e37eed22.chunk.js","sourcesContent":["export const today = new Date().toISOString().substring(0, 10);\r\n\r\nexport const initialTodoForm = {\r\n    id: 0,\r\n    discription: \"\",\r\n    deadline: today,\r\n    important: false,\r\n    done: false,\r\n    doneDate: \"\"\r\n};\r\n\r\nexport const initialState = {\r\n    todoForm: initialTodoForm,\r\n    todoList: []\r\n};","import { AppState, Action } from \"../types/types\";\r\nimport { today, initialTodoForm } from \"../initials/initials\";\r\n\r\nexport const reducer = (state: AppState, action: Action) => {\r\n  switch (action.type) {\r\n    case \"RESET\":\r\n      return action.payload\r\n    case \"ADD_DISCRIPTION\":\r\n      return {\r\n        ...state,\r\n        todoForm: { ...state.todoForm, discription: action.payload }\r\n      };\r\n    case \"ADD_DEADLINE\":\r\n      if (action.payload >= today) {\r\n        return {\r\n          ...state,\r\n          todoForm: { ...state.todoForm, deadline: action.payload }\r\n        };\r\n      } else {\r\n        return state;\r\n      }\r\n    case \"ADD_IMPORTANT\":\r\n      return {\r\n        ...state,\r\n        todoForm: { ...state.todoForm, important: action.payload }\r\n      };\r\n    case \"ADD_TODO\":\r\n      return {\r\n        ...state,\r\n        todoForm: { ...initialTodoForm, id: state.todoForm.id + 1 },\r\n        todoList: [...state.todoList, action.payload]\r\n      };\r\n    case \"DELETE_TODO\":\r\n      return {\r\n        ...state,\r\n        todoList: state.todoList.filter(x => x.id !== action.payload.id)\r\n      };\r\n    case \"MAKEDONE_TODO\":\r\n      return {\r\n        ...state,\r\n        todoList: state.todoList.map(x =>\r\n          x.id === action.payload.id\r\n            ? {\r\n                ...x,\r\n                done: true,\r\n                doneDate: today\r\n              }\r\n            : {\r\n                ...x\r\n              }\r\n        )\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import * as React from \"react\";\r\nimport { initialState } from \"../initials/initials\";\r\nimport { reducer } from \"../reducers/reducers\";\r\nimport { AppState, Dispatch, AppProviderProps } from \"../types/types\";\r\n\r\nconst AppStateContext = React.createContext<AppState | undefined>(undefined);\r\nconst AppDispatchContext = React.createContext<Dispatch | undefined>(undefined);\r\n\r\nconst AppProvider: React.SFC<AppProviderProps> = ({ children }: AppProviderProps) => {\r\n  const [AppState, dispatch] = React.useReducer(reducer, initialState);\r\n  return (\r\n    <AppStateContext.Provider value={AppState}>\r\n      <AppDispatchContext.Provider value={dispatch}>\r\n        {children}\r\n      </AppDispatchContext.Provider>\r\n    </AppStateContext.Provider>\r\n  );\r\n};\r\n\r\nconst useAppState = () => {\r\n  const context = React.useContext(AppStateContext);\r\n  if (context === undefined) {\r\n    throw new Error(\"useAppState must be used within AppProvider\");\r\n  }\r\n  return context;\r\n};\r\n\r\nconst useAppDispatch = () => {\r\n  const context = React.useContext(AppDispatchContext);\r\n  if (context === undefined) {\r\n    throw new Error(\"useDispatchState must be used within AppProvider\");\r\n  }\r\n  return context;\r\n};\r\n\r\nexport { AppProvider, useAppState, useAppDispatch };\r\n","import * as React from \"react\";\r\nimport {useAppState, useAppDispatch} from \"../context/context\"\r\n\r\nconst Form = () => {\r\n  const AppState = useAppState();\r\n  const dispatch = useAppDispatch();\r\n\r\n  const handleSubmit = (e: React.FormEvent) => {\r\n    e.preventDefault();\r\n    dispatch({\r\n      type: \"ADD_TODO\",\r\n      payload: AppState.todoForm\r\n    });\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <h1>Todo-Lista</h1>\r\n      <div>\r\n        <span>Dodaj zadanie</span>\r\n        <br />\r\n        <span>Podaj opis zadania: </span>\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"Discription...\"\r\n          value={AppState.todoForm.discription}\r\n          required\r\n          onChange={e =>\r\n            dispatch({\r\n              type: \"ADD_DISCRIPTION\",\r\n              payload: e.currentTarget.value\r\n            })\r\n          }\r\n        />\r\n      </div>\r\n      <div>\r\n        <span>Podaj deadline: </span>\r\n        <input\r\n          type=\"date\"\r\n          value={AppState.todoForm.deadline}\r\n          onChange={e =>\r\n            dispatch({\r\n              type: \"ADD_DEADLINE\",\r\n              payload: e.currentTarget.value\r\n            })\r\n          }\r\n        />\r\n      </div>\r\n      <div>\r\n        <span>Priorytet: </span>\r\n        <input\r\n          type=\"checkbox\"\r\n          checked={AppState.todoForm.important}\r\n          onChange={e =>\r\n            dispatch({\r\n              type: \"ADD_IMPORTANT\",\r\n              payload: e.currentTarget.checked\r\n            })\r\n          }\r\n        />\r\n      </div>\r\n      <button type=\"submit\">Dodaj</button>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default Form\r\n","import React from \"react\";\r\nimport { useAppState, useAppDispatch } from \"../context/context\";\r\nimport { Todo } from \"../types/types\";\r\n\r\nconst TodoList = () => {\r\n  const AppState = useAppState();\r\n  const dispatch = useAppDispatch();\r\n\r\n  const makeDoneTodo = (item: Todo) => {\r\n    dispatch({ type: \"MAKEDONE_TODO\", payload: item });\r\n  };\r\n\r\n  const deleteTodo = (item: Todo) => {\r\n    dispatch({ type: \"DELETE_TODO\", payload: item });\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <p>Lista zada≈Ñ do zrobienia:</p>\r\n      <ul>\r\n        {AppState.todoList\r\n          .filter((x: Todo) => !x.done)\r\n          .map((item: Todo) => (\r\n            <li key={item.id}>\r\n              <span style={item.important ? { color: \"red\" } : undefined}>\r\n                {item.discription}{\" \"}\r\n              </span>\r\n              <button onClick={() => makeDoneTodo(item)}>Zrobione!</button>\r\n              <button onClick={() => deleteTodo(item)}>Usu≈Ñ</button>\r\n            </li>\r\n          ))}\r\n      </ul>\r\n      <p>Zadania zrobione:</p>\r\n      <ul>\r\n        {AppState.todoList\r\n          .filter((x: Todo) => x.done)\r\n          .map((item: Todo) => (\r\n            <li key={item.id}>\r\n              <span>\r\n                {item.discription}, wykonano: {item.doneDate}\r\n              </span>\r\n              <button onClick={() => deleteTodo(item)}>Usu≈Ñ</button>\r\n            </li>\r\n          ))}\r\n      </ul>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default TodoList;","import React, { useEffect, useRef } from 'react';\nimport { useAppState, useAppDispatch } from \"./context/context\";\n\nimport Form from \"./components/Form\"\nimport TodoList from \"./components/TodoList\"\n\nimport \"./App.css\";\n\nconst App: React.FC = () => {\n  const AppState = useAppState();\n  const dispatch = useAppDispatch();\n\n  const didRun = useRef(false);\n\n  useEffect(() => {\n    if (!didRun.current) {\n      const raw = localStorage.getItem(\"data\");\n      if (raw) {\n        dispatch({ type: \"RESET\", payload: JSON.parse(raw) });\n        didRun.current = true;\n      }\n    }\n  });\n\n  useEffect(() => {\n    localStorage.setItem(\"data\", JSON.stringify(AppState));\n  }, [AppState]);\n\n  return (\n      <div className=\"App\">\n        <Form />\n        <br />\n        <TodoList />\n      </div>\n  );\n};\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { AppProvider } from \"./context/context\";\n\nReactDOM.render(\n  <AppProvider>\n    <App />\n  </AppProvider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}